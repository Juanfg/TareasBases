DB

create table users (
    id serial primary key, 
    email varchar(100), 
    password varchar(100), 
    valid boolean default(false), 
    token varchar(40), 
    type integer
);

create table teams (
    id serial primary key, 
    name varchar(30), 
    wins integer check (wins >= 0) default 0,
    loses integer check (loses >= 0) default 0,
    ties integer check (ties >= 0) default 0,
    points integer check (points >= 0) default 0
);

create table games (
    id serial primary key,
    local_id integer references teams(id) on update cascade on delete cascade, 
    visitor_id integer references teams(id) on update cascade on delete cascade, 
    local_goals integer default (0), 
    visitor_goals integer default (0), 
    active boolean default(false),
    date timestamp check(date > now())
);

create table players (
    id serial primary key, 
    name varchar(30), 
    team_id integer references teams(id) on update cascade on delete cascade, 
    user_id integer
);

create table coaches (
    id serial primary key, 
    name varchar(30), 
    team_id integer null references teams(id) on update cascade on delete cascade, 
    user_id integer
);

create table admin (
    id serial primary key,
    name varchar(30),
    user_id integer
);

INSERTS

insert into teams (name) values ('barcelona');
insert into users (email ,password, valid, token, type) values ('a', '86f7e437faa5a7fce15d1ddcb9eaeaea377667b8', true, 'x', 1);
insert into users (email ,password, valid, token, type) values ('c', '84a516841ba77a5b4648de2cd0dfcb30ea46dbb4', true, 'x', 2);
insert into users (email ,password, valid, token, type) values ('p', '516b9783fca517eecbd1d064da2d165310b19759', true, 'x', 3);

insert into coaches(name, team_id, user_id) values ('Pep', 1, 2);
insert into players(name, team_id, user_id) values ('Messi', 1, 3);


VIEW

create view getLast as select * from users order by id desc limit 1;

FUNCTIONS

CREATE OR REPLACE FUNCTION get_games_played (team_id integer)
RETURNS integer AS $total_games_played$
declare
	total_games_played integer;
BEGIN
    SELECT wins + loses + ties into total_games_played FROM teams WHERE id = team_id;
    RETURN total_games_played;
END;
$total_games_played$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_team_real (team_id integer, game_result integer)
RETURNS void as $$
BEGIN
    IF game_result = 1 THEN
        UPDATE teams SET wins = wins + 1, points = points + 3 WHERE id = team_id;
    ELSEIF game_result = 2 THEN
        UPDATE teams SET loses = loses + 1 WHERE id = team_id;
    ELSEIF game_result = 3 THEN
        UPDATE teams SET ties = ties + 1, points = points + 1 WHERE id = team_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_teams()
RETURNS TRIGGER AS $example$
BEGIN
    IF NEW.local_goals > NEW.visitor_goals THEN
        PERFORM update_team_real (OLD.local_id, 1);
        PERFORM update_team_real (OLD.visitor_id, 2);
    ELSEIF NEW.local_goals < NEW.visitor_goals THEN
        PERFORM update_team_real (OLD.local_id, 2);
        PERFORM update_team_real (OLD.visitor_id, 1);
    ELSE
        PERFORM update_team_real (OLD.local_id, 3);
        PERFORM update_team_real (OLD.visitor_id, 3);
    END IF;
    RETURN NEW;
END;
$example$ LANGUAGE plpgsql;

TRIGGERS

CREATE TRIGGER update_local_team
    AFTER UPDATE ON games
    FOR EACH ROW
    WHEN (OLD.active IS DISTINCT FROM NEW.active)
    EXECUTE PROCEDURE update_teams();
